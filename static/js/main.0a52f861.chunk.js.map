{"version":3,"sources":["Add.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Add","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","addDecision","state","setState","initialState","handleChange","event","value","target","decision","react_default","a","createElement","Input_default","type","onChange","Button_default","variant","onClick","Component","Table","_this$props","decisions","removeDecision","Table_TBody","TBody","rows","map","row","index","TableRow_default","key","TableCell_default","color","io","TableBody_default","App","concat","toConsumableArray","filter","i","choose","finalDecision","Math","floor","random","length","alert","src_Add","src_Table","disabled","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a52f861.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\n\nclass Add extends Component {\n    constructor(props) {\n        super(props);\n\n        this.initialState = {\n            decision : ''\n        };\n\n        this.state = this.initialState;\n    }\n\n    handleSubmit = () => {\n        this.props.addDecision(this.state);\n        this.setState(this.initialState);\n    };\n\n    handleChange = event => {\n        const {value} = event.target;\n        this.setState({ decision : value });\n    };\n\n    render() {\n        const {decision} = this.state;\n        return (\n            <form>\n                <Input\n                    type=\"text\"\n                    value={decision}\n                    onChange={this.handleChange} />\n                <Button variant=\"contained\" onClick={this.handleSubmit}>\n                    添加选项\n                </Button>\n            </form>\n        )\n    }\n}\n\nexport default Add;\n","import React, { Component } from 'react';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport {IoIosTrash} from 'react-icons/io';\n\nclass Table extends Component {\n    render() {\n        const {decisions, removeDecision} = this.props;\n        return (\n            <TBody\n                decisions = {decisions}\n                removeDecision = {removeDecision}\n            />\n        )\n    }\n\n}\n\nconst TBody = props => {\n    const rows = props.decisions.map((row, index) => {\n        return (\n            <TableRow key={index}>\n                <TableCell>决策{index + 1}</TableCell>\n                <TableCell>{row.decision}</TableCell>\n                <TableCell> <Button color=\"default\" onClick={() => {props.removeDecision(index)}}><IoIosTrash/></Button></TableCell>\n            </TableRow>\n        );\n    });\n    return <TableBody>{rows}</TableBody>;\n};\n\nexport default Table;\n\n\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Add from './Add';\nimport Table from './Table';\n\nclass App extends Component {\n    state = {\n        decisions : [\n        ]\n    };\n\n    addDecision = decision => {\n        this.setState({\n            decisions : [...this.state.decisions, decision]\n        })\n    };\n\n    removeDecision = index => {\n        const {decisions} = this.state;\n        this.setState({\n            decisions : decisions.filter((decision, i) => {\n                return i !== index;\n            })\n        });\n    };\n\n    choose = () => {\n        const finalDecision = Math.floor(Math.random() * this.state.decisions.length) + 1;\n        alert(\"我们选择决策\" + finalDecision);\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>决策选择器</h1>\n                <Add addDecision={this.addDecision} />\n                <Table decisions={this.state.decisions} removeDecision={this.removeDecision} />\n                <Button variant=\"contained\" onClick={this.choose} disabled={this.state.decisions.length < 2}>\n                    开始随机选择\n                </Button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}